import logging
import re
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import rdflib

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# RDF –≥—Ä–∞—Ñ
g = rdflib.Graph()
EX = rdflib.Namespace("http://example.org/training#")
XSD = rdflib.Namespace("http://www.w3.org/2001/XMLSchema#")
RDF = rdflib.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS = rdflib.RDFS

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
NAME, AGE, HEIGHT, WEIGHT, WORKOUT_SELECTION, ADD_WORKOUT_SELECTION, RECOMMENDATION_NAME, ADD_WORKOUT_NAME = range(8)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
try:
    g.parse("SPARQL.ttl", format="n3")


    def ensure_default_workouts():
        predefined = [
            {"uri": "Workout_Beginner_1", "–Ω–∞–∑–≤–∞": "–†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞", "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "intensity": "Low",
             "duration": None, "calories": 100, "sets": 3},
            {"uri": "Workout_Cardio_2", "–Ω–∞–∑–≤–∞": "–ö–∞—Ä–¥—ñ–æ –±—ñ–≥", "exercise": "–ë—ñ–≥ –Ω–∞ –º—ñ—Å—Ü—ñ", "intensity": "Medium",
             "duration": 20, "calories": 150, "sets": None},
            {"uri": "Workout_Strength_3", "–Ω–∞–∑–≤–∞": "–°–∏–ª–æ–≤—ñ –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è", "exercise": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è", "intensity": "–í–∏—Å–æ–∫–∞",
             "duration": None, "calories": 120, "sets": 5},
            {"uri": "Workout_Yoga_4", "–Ω–∞–∑–≤–∞": "–ô–æ–≥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤", "exercise": "–ü–æ–∑–∞ –¥–µ—Ä–µ–≤–∞", "intensity": "Low",
             "duration": 25, "calories": 80, "sets": None},
            {"uri": "Workout_Boxing_5", "–Ω–∞–∑–≤–∞": "–î–æ–º–∞—à–Ω—ñ–π –±–æ–∫—Å", "exercise": "–£–¥–∞—Ä–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ", "intensity": "–í–∏—Å–æ–∫–∞",
             "duration": None, "calories": 200, "sets": 6},
            {"uri": "Workout_Pilates_6", "–Ω–∞–∑–≤–∞": "–ü—ñ–ª–∞—Ç–µ—Å –Ω–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å", "exercise": "–†–æ–∑—Ç—è–∂–∫–∞", "intensity": "Medium",
             "duration": None, "calories": 110, "sets": 3},
            {"uri": "Workout_Squats", "–Ω–∞–∑–≤–∞": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞", "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞",
             "intensity": "Moderate", "duration": None, "calories": 250.0, "sets": 6},
            {"uri": "Workout_Swimming", "–Ω–∞–∑–≤–∞": "–ü–ª–∞–≤–∞–Ω–Ω—è", "exercise": "–ü–ª–∞–≤–∞–Ω–Ω—è", "intensity": "Moderate",
             "duration": 45, "calories": 450.0, "sets": None},
            {"uri": "Workout_Yoga", "–Ω–∞–∑–≤–∞": "–ô–æ–≥–∞-—Ñ–ª–æ—É", "exercise": "–ô–æ–≥–∞-—Ñ–ª–æ—É", "intensity": "Low", "duration": 30,
             "calories": 200.0, "sets": None},
            {"uri": "Workout_Cardio", "–Ω–∞–∑–≤–∞": "–ë—ñ–≥", "exercise": "–ë—ñ–≥", "intensity": "Moderate", "duration": 45,
             "calories": 400.0, "sets": None},
            {"uri": "Workout_Strength", "–Ω–∞–∑–≤–∞": "–ü—ñ–¥–Ω—è—Ç—Ç—è –≤–∞–≥–∏", "exercise": "–ü—ñ–¥–Ω—è—Ç—Ç—è –≤–∞–≥–∏", "intensity": "High",
             "duration": None, "calories": 350.0, "sets": 5},
        ]

        for w in predefined:
            workout_uri = EX[w["uri"]]
            if (workout_uri, RDF.type, EX.Workout) not in g:
                g.add((workout_uri, RDF.type, EX.Workout))
                g.add((workout_uri, EX.–Ω–∞–∑–≤–∞, rdflib.Literal(w["–Ω–∞–∑–≤–∞"], lang="uk")))
                g.add((workout_uri, EX.–≤–ø—Ä–∞–≤–∞, rdflib.Literal(w["exercise"], lang="uk")))
                g.add((workout_uri, EX.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, EX[w["intensity"]]))
                if w["sets"] is not None:
                    g.add((workout_uri, EX.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤, rdflib.Literal(w["sets"], datatype=XSD.integer)))
                if w["duration"] is not None:
                    g.add((workout_uri, EX.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, rdflib.Literal(w["duration"], datatype=XSD.integer)))
                g.add((workout_uri, EX.—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó, rdflib.Literal(w["calories"], datatype=XSD.float)))

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        for uri, label in [("Low", "–ù–∏–∑—å–∫–∞"), ("Medium", "–°–µ—Ä–µ–¥–Ω—è"), ("High", "–í–∏—Å–æ–∫–∞"), ("Moderate", "–°–µ—Ä–µ–¥–Ω—è"),
                           ("–í–∏—Å–æ–∫–∞", "–í–∏—Å–æ–∫–∞")]:
            intensity_uri = EX[uri]
            if (intensity_uri, RDF.type, EX.Intensity) not in g:
                g.add((intensity_uri, RDF.type, EX.Intensity))
            g.set((intensity_uri, RDFS.label, rdflib.Literal(label, lang="uk")))

        g.serialize("SPARQL.ttl", format="n3")

except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó: {e}")
    raise


# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω—É–≤–∞–Ω—å!\n\n"
        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "/create_user ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/users ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "/add_workout ‚Äî –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        "/recommendations ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
        "/myworkouts <–Ü–º‚Äô—è> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        "/stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "/cancel ‚Äî –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
        "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞ / —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start ‚Äî –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/create_user ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/users ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "/add_workout ‚Äî –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        "/recommendations ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "/myworkouts <–Ü–º‚Äô—è> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "/cancel ‚Äî –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    )


async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = """
    PREFIX ex: <http://example.org/training#>
    SELECT ?user ?age ?height ?weight ?fitnessLevel ?bmi
    WHERE {
        ?user a ex:User ;
              ex:–≤—ñ–∫ ?age ;
              ex:–∑—Ä—ñ—Å—Ç ?height ;
              ex:–≤–∞–≥–∞ ?weight ;
              ex:—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É ?fitnessLevel ;
              ex:—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞ ?bmi .
    }"""
    results = g.query(q)
    text = "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n"
    for r in results:
        name = r.user.split('#')[-1]
        text += f"üë§ {name} ‚Äî –í—ñ–∫: {r.age}, –ó—Ä—ñ—Å—Ç: {r.height}, –í–∞–≥–∞: {r.weight}, –Ü–ú–¢: {r.bmi}, –†—ñ–≤–µ–Ω—å: {r.fitnessLevel.split('#')[-1]}\n"
    await update.message.reply_text(text or "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")


async def create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return NAME


async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return NAME
    if g.query(f"PREFIX ex: <http://example.org/training#> ASK {{ ex:{name} a ex:User }}").askAnswer:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î.")
        return NAME
    context.user_data["name"] = name
    await update.message.reply_text("–í—ñ–∫:")
    return AGE


async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if not (0 < age < 120):
            raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("–ó—Ä—ñ—Å—Ç (–º):")
        return HEIGHT
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return AGE


async def receive_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text)
        if not (0.5 < height < 3):
            raise ValueError
        context.user_data["height"] = height
        await update.message.reply_text("–í–∞–≥–∞ (–∫–≥):")
        return WEIGHT
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return HEIGHT


async def receive_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if not (10 < weight < 300):
            raise ValueError
        name = context.user_data["name"]
        age = context.user_data["age"]
        height = context.user_data["height"]
        bmi = round(weight / (height * height), 1)
        uri = EX[name]
        g.add((uri, RDF.type, EX.User))
        g.add((uri, EX.–≤—ñ–∫, rdflib.Literal(age, datatype=XSD.integer)))
        g.add((uri, EX.–∑—Ä—ñ—Å—Ç, rdflib.Literal(height, datatype=XSD.float)))
        g.add((uri, EX.–≤–∞–≥–∞, rdflib.Literal(weight, datatype=XSD.float)))
        g.add((uri, EX.—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞, rdflib.Literal(bmi, datatype=XSD.float)))
        g.add((uri, EX.—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É, EX.Beginner))
        g.add((uri, EX.–¥–æ—Å–≤—ñ–¥, EX.Beginner))
        g.serialize("SPARQL.ttl", format="n3")
        await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} —Å—Ç–≤–æ—Ä–µ–Ω–æ! –Ü–ú–¢: {bmi}")
        context.user_data["new_user"] = name
        return await list_workouts(update, context, select_state=WORKOUT_SELECTION)
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return WEIGHT


async def list_workouts(update, context, select_state):
    q = "PREFIX ex: <http://example.org/training#> SELECT ?w WHERE { ?w a ?t . ?t rdfs:subClassOf* ex:Workout . }"
    res = g.query(q, initNs={"ex": EX, "rdfs": RDFS})
    workouts = []
    for row in res:
        wid = row.w

        # –û—Ç—Ä–∏–º—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        label_query = f"""
        PREFIX ex: <http://example.org/training#>
        SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
            <{wid}> ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
        }}
        """
        label_result = g.query(label_query)
        title = next(iter(label_result))[0] if label_result else wid.split('#')[-1]

        wid = wid.split('#')[-1]
        workouts.append((wid, str(title)))
    context.user_data["available_workouts"] = [w[0] for w in workouts]
    context.user_data["workout_names"] = workouts
    txt = "\n".join([f"{i + 1}. {w[1]}" for i, w in enumerate(workouts)])
    await update.message.reply_text(f"–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n{txt}")
    return select_state


async def receive_workout_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text.strip()) - 1
        workouts = context.user_data["available_workouts"]
        if not (0 <= index < len(workouts)):
            raise ValueError

        workout_name = workouts[index]
        user_name = context.user_data["new_user"]

        # –î–æ–¥–∞—î–º–æ –∑–≤‚Äô—è–∑–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á -> —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        g.add((EX[user_name], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout_name]))
        g.serialize(destination="SPARQL.ttl", format="n3")

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (ex:–Ω–∞–∑–≤–∞), —è–∫—â–æ –≤–æ–Ω–∞ —î
        label_query = f"""
        PREFIX ex: <http://example.org/training#>
        SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
            ex:{workout_name} ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
        }}
        """
        label_result = g.query(label_query)
        workout_label = next(iter(label_result))[0] if label_result else workout_name

        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {workout_label} –¥–ª—è {user_name}.")
        context.user_data.clear()
        return ConversationHandler.END

    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return WORKOUT_SELECTION


async def add_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return ADD_WORKOUT_NAME


async def receive_add_workout_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ADD_WORKOUT_NAME
    if (EX[name], RDF.type, EX.User) not in g:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ADD_WORKOUT_NAME
    context.user_data["new_user"] = name
    return await list_workouts(update, context, select_state=ADD_WORKOUT_SELECTION)


async def receive_additional_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        i = int(update.message.text) - 1
        workout = context.user_data["available_workouts"][i]
        user = context.user_data["new_user"]
        g.add((EX[user], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout]))
        g.serialize("SPARQL.ttl", format="n3")

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        label_query = f"""
        PREFIX ex: <http://example.org/training#>
        SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
            ex:{workout} ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
        }}
        """
        label_result = g.query(label_query)
        workout_label = next(iter(label_result))[0] if label_result else workout

        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {workout_label} –¥–ª—è {user}.")
        context.user_data.clear()
        return ConversationHandler.END
    except:
        await update.message.reply_text("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ADD_WORKOUT_SELECTION


async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return RECOMMENDATION_NAME


async def receive_recommendation_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", user_name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return RECOMMENDATION_NAME
    if (EX[user_name], RDF.type, EX.User) not in g:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return RECOMMENDATION_NAME

    query = f"""
    PREFIX ex: <http://example.org/training#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    SELECT ?workout ?–Ω–∞–∑–≤–∞ ?–≤–ø—Ä–∞–≤–∞ ?—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ ?—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?–∫–∞–ª–æ—Ä—ñ—ó
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ . }}
        OPTIONAL {{ ?workout ex:–≤–ø—Ä–∞–≤–∞ ?–≤–ø—Ä–∞–≤–∞ . }}
        OPTIONAL {{ ?workout ex:—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å . }}
        OPTIONAL {{ ?workout ex:–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ ?–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ . }}
        OPTIONAL {{ ?workout ex:—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å . }}
        OPTIONAL {{ ?workout ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?–∫–∞–ª–æ—Ä—ñ—ó . }}
    }}
    """

    results = g.query(query, initNs={"ex": EX, "rdfs": RDFS})

    if not results:
        await update.message.reply_text(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    reply = f"üèãÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {user_name}:\n"
    for row in results:
        title = str(row.–Ω–∞–∑–≤–∞) if row.–Ω–∞–∑–≤–∞ else row.workout.split('#')[-1]
        exercise = str(row.–≤–ø—Ä–∞–≤–∞) if row.–≤–ø—Ä–∞–≤–∞ else "‚Äî"
        calories = str(row.–∫–∞–ª–æ—Ä—ñ—ó) if row.–∫–∞–ª–æ—Ä—ñ—ó else "?"

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏: —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤
        if row.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:
            duration_or_sets = f"{row.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å} —Ö–≤"
        elif row.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤:
            duration_or_sets = f"{row.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤} –ø—ñ–¥—Ö–æ–¥—ñ–≤"
        else:
            duration_or_sets = "–Ω–µ–≤—ñ–¥–æ–º–æ"

        # –û—Ç—Ä–∏–º—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π label —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—ñ
        intensity_label = None
        if row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:
            labels = list(g.objects(row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, RDFS.label))
            intensity_label = next((str(l) for l in labels if getattr(l, 'language', None) == 'uk'), None)
        if not intensity_label and row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:
            intensity_label = row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å.split('#')[-1]
        if not intensity_label:
            intensity_label = "–ù–µ–≤—ñ–¥–æ–º–æ"

        reply += f"\nüèãÔ∏è {title} ‚Äî {exercise}, –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {intensity_label}, {duration_or_sets}, {calories} –∫–∫–∞–ª"

    await update.message.reply_text(reply)
    return ConversationHandler.END


async def myworkouts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /myworkouts –Ü–º‚Äô—è")
        return
    user_name = context.args[0]

    query = f"""
    PREFIX ex: <http://example.org/training#>
    SELECT ?workout ?–Ω–∞–∑–≤–∞
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ }}
    }}
    """

    results = g.query(query, initNs={"ex": EX})

    if not results:
        await update.message.reply_text(f"‚ùå –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")
        return

    reply = f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}:\n"
    for row in results:
        label = row.–Ω–∞–∑–≤–∞ if row.–Ω–∞–∑–≤–∞ else row.workout.split('#')[-1]
        reply += f"‚Ä¢ {label}\n"

    await update.message.reply_text(reply)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    return "STAT_NAME"


async def receive_stat_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", user_name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return "STAT_NAME"
    if (EX[user_name], RDF.type, EX.User) not in g:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return "STAT_NAME"

    # –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    query = f"""
    PREFIX ex: <http://example.org/training#>
    SELECT ?–Ω–∞–∑–≤–∞ ?–∫–∞–ª–æ—Ä—ñ—ó
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
        ?workout ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?–∫–∞–ª–æ—Ä—ñ—ó .
    }}
    """
    results = g.query(query, initNs={"ex": EX})

    if not results:
        await update.message.reply_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
    labels = []
    data = []
    for row in results:
        labels.append(str(row.–Ω–∞–∑–≤–∞))
        data.append(float(row.–∫–∞–ª–æ—Ä—ñ—ó))

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JSON –¥–ª—è –±–∞—Ä-—á–∞—Ä—Ç—É
    chart_config = {
        "type": "bar",
        "data": {
            "labels": labels,
            "datasets": [{
                "label": "–°–ø–∞–ª–µ–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó",
                "data": data,
                "backgroundColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40", "#4BC0C0",
                                    "#FF6384", "#36A2EB", "#FFCE56", "#9966FF"],
                "borderColor": ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40", "#4BC0C0", "#FF6384",
                                "#36A2EB", "#FFCE56", "#9966FF"],
                "borderWidth": 1
            }]
        },
        "options": {
            "scales": {
                "y": {
                    "beginAtZero": True,
                    "title": {"display": True, "text": "–ö–∞–ª–æ—Ä—ñ—ó"}
                },
                "x": {
                    "title": {"display": True, "text": "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"}
                }
            },
            "plugins": {
                "legend": {"position": "top"}
            }
        }
    }

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π –¥–ª—è {user_name}:")
    chart_block = f"```chartjs\n{chart_config}\n```"
    await update.message.reply_text(chart_block)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


def main():
    app = Application.builder().token("7973391875:AAHAT7xxc3TWp2ABRI-J3b5_0DhX-FPMWJ4").build()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    commands = [
        ("start", "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        ("help", "–î–æ–ø–æ–º–æ–≥–∞ / —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        ("create_user", "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("users", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"),
        ("add_workout", "–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"),
        ("recommendations", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"),
        ("myworkouts", "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("stats", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"),
        ("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é"),
    ]
    app.bot.set_my_commands(commands)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("create_user", create_user)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_weight)],
            WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_workout_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add_workout", add_workout)],
        states={
            ADD_WORKOUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_workout_name)],
            ADD_WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_additional_workout)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    recommendation_conv = ConversationHandler(
        entry_points=[CommandHandler("recommendations", recommendations)],
        states={
            RECOMMENDATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_recommendation_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_conv = ConversationHandler(
        entry_points=[CommandHandler("stats", show_stats)],
        states={
            "STAT_NAME": [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_stat_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏
    app.add_handler(conv)
    app.add_handler(add_conv)
    app.add_handler(recommendation_conv)
    app.add_handler(stats_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("users", users))
    app.add_handler(CommandHandler("myworkouts", myworkouts))
    app.run_polling()


if __name__ == "__main__":
    main()