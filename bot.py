import logging
import re
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import rdflib
import matplotlib.pyplot as plt
import os
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import matplotlib.image as mpimg

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# RDF –≥—Ä–∞—Ñ
g = rdflib.Graph()
EX = rdflib.Namespace("http://example.org/training#")
XSD = rdflib.Namespace("http://www.w3.org/2001/XMLSchema#")
RDF = rdflib.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS = rdflib.RDFS

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
NAME, AGE, HEIGHT, WEIGHT, WORKOUT_SELECTION, ADD_WORKOUT_NAME, ADD_WORKOUT_SELECTION, RECOMMENDATION_NAME, STAT_NAME, MYWORKOUTS_NAME, AI_MODE = range(
    11)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
try:
    g.parse("SPARQL.ttl", format="n3")


    def ensure_default_workouts():
        predefined = [
            {"uri": "Workout_Beginner_1", "–Ω–∞–∑–≤–∞": "–†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞", "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è", "intensity": "Low",
             "duration": None, "calories": 100, "sets": 3},
            {"uri": "Workout_Cardio_2", "–Ω–∞–∑–≤–∞": "–ö–∞—Ä–¥—ñ–æ –±—ñ–≥", "exercise": "–ë—ñ–≥ –Ω–∞ –º—ñ—Å—Ü—ñ", "intensity": "Medium",
             "duration": 20, "calories": 150, "sets": None},
            {"uri": "Workout_Strength_3", "–Ω–∞–∑–≤–∞": "–°–∏–ª–æ–≤—ñ –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è", "exercise": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è", "intensity": "–í–∏—Å–æ–∫–∞",
             "duration": None, "calories": 120, "sets": 5},
            {"uri": "Workout_Yoga_4", "–Ω–∞–∑–≤–∞": "–ô–æ–≥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤", "exercise": "–ü–æ–∑–∞ –¥–µ—Ä–µ–≤–∞", "intensity": "Low",
             "duration": 25, "calories": 80, "sets": None},
            {"uri": "Workout_Boxing_5", "–Ω–∞–∑–≤–∞": "–î–æ–º–∞—à–Ω—ñ–π –±–æ–∫—Å", "exercise": "–£–¥–∞—Ä–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ", "intensity": "–í–∏—Å–æ–∫–∞",
             "duration": None, "calories": 200, "sets": 6},
            {"uri": "Workout_Pilates_6", "–Ω–∞–∑–≤–∞": "–ü—ñ–ª–∞—Ç–µ—Å –Ω–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å", "exercise": "–†–æ–∑—Ç—è–∂–∫–∞", "intensity": "Medium",
             "duration": None, "calories": 110, "sets": 3},
            {"uri": "Workout_Squats", "–Ω–∞–∑–≤–∞": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞", "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è –∑ –≤–∞–≥–æ—é —Ç—ñ–ª–∞",
             "intensity": "Moderate", "duration": None, "calories": 250.0, "sets": 6},
            {"uri": "Workout_Swimming", "–Ω–∞–∑–≤–∞": "–ü–ª–∞–≤–∞–Ω–Ω—è", "exercise": "–ü–ª–∞–≤–∞–Ω–Ω—è", "intensity": "Moderate",
             "duration": 45, "calories": 450.0, "sets": None},
            {"uri": "Workout_Yoga", "–Ω–∞–∑–≤–∞": "–ô–æ–≥–∞-—Ñ–ª–æ—É", "exercise": "–ô–æ–≥–∞-—Ñ–ª–æ—É", "intensity": "Low", "duration": 30,
             "calories": 200.0, "sets": None},
            {"uri": "Workout_Cardio", "–Ω–∞–∑–≤–∞": "–ë—ñ–≥", "exercise": "–ë—ñ–≥", "intensity": "Moderate", "duration": 45,
             "calories": 400.0, "sets": None},
            {"uri": "Workout_Strength", "–Ω–∞–∑–≤–∞": "–ü—ñ–¥–Ω—è—Ç—Ç—è –≤–∞–≥–∏", "exercise": "–ü—ñ–¥–Ω—è—Ç—Ç—è –≤–∞–≥–∏", "intensity": "High",
             "duration": None, "calories": 350.0, "sets": 5},
        ]

        for w in predefined:
            workout_uri = EX[w["uri"]]
            if (workout_uri, RDF.type, EX.Workout) not in g:
                g.add((workout_uri, RDF.type, EX.Workout))
                g.add((workout_uri, EX.–Ω–∞–∑–≤–∞, rdflib.Literal(w["–Ω–∞–∑–≤–∞"], lang="uk")))
                g.add((workout_uri, EX.–≤–ø—Ä–∞–≤–∞, rdflib.Literal(w["exercise"], lang="uk")))
                g.add((workout_uri, EX.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, EX[w["intensity"]]))
                if w["sets"] is not None:
                    g.add((workout_uri, EX.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤, rdflib.Literal(w["sets"], datatype=XSD.integer)))
                if w["duration"] is not None:
                    g.add((workout_uri, EX.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, rdflib.Literal(w["duration"], datatype=XSD.integer)))
                g.add((workout_uri, EX.—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó, rdflib.Literal(w["calories"], datatype=XSD.float)))

        for uri, label in [("Low", "–ù–∏–∑—å–∫–∞"), ("Medium", "–°–µ—Ä–µ–¥–Ω—è"), ("High", "–í–∏—Å–æ–∫–∞"), ("Moderate", "–°–µ—Ä–µ–¥–Ω—è"),
                           ("–í–∏—Å–æ–∫–∞", "–í–∏—Å–æ–∫–∞")]:
            intensity_uri = EX[uri]
            if (intensity_uri, RDF.type, EX.Intensity) not in g:
                g.add((intensity_uri, RDF.type, EX.Intensity))
            g.set((intensity_uri, RDFS.label, rdflib.Literal(label, lang="uk")))

        g.serialize("SPARQL.ttl", format="n3")

except Exception as e:
    logger.error(f"üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó: {e}")
    raise


# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω—É–≤–∞–Ω—å! üí™\n\n"
        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
        "üèÉ /create_user ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üë• /users ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "üèãÔ∏è /add_workout ‚Äî –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        "üìã /recommendations ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n"
        "üí™ /myworkouts ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üìä /stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "‚ùå /cancel ‚Äî –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
        "‚ÑπÔ∏è /help ‚Äî –î–æ–ø–æ–º–æ–≥–∞ / —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üèãÔ∏è‚Äç‚ôÇÔ∏è /start ‚Äî –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "üèÉ /create_user ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üë• /users ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "üèãÔ∏è /add_workout ‚Äî –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
        "üìã /recommendations ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "üí™ /myworkouts ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üìä /stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "‚ùå /cancel ‚Äî –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
        "‚ÑπÔ∏è /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    )


async def users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = """
    PREFIX ex: <http://example.org/training#>
    SELECT ?user ?age ?height ?weight ?fitnessLevel ?bmi
    WHERE {
        ?user a ex:User ;
              ex:–≤—ñ–∫ ?age ;
              ex:–∑—Ä—ñ—Å—Ç ?height ;
              ex:–≤–∞–≥–∞ ?weight ;
              ex:—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É ?fitnessLevel ;
              ex:—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞ ?bmi .
    }"""
    results = g.query(q)
    text = "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n"
    for r in results:
        name = r.user.split('#')[-1]
        text += f"üë§ {name} ‚Äî –í—ñ–∫: {r.age}, –ó—Ä—ñ—Å—Ç: {r.height}, –í–∞–≥–∞: {r.weight}, –Ü–ú–¢: {r.bmi}, –†—ñ–≤–µ–Ω—å: {r.fitnessLevel.split('#')[-1]}\n"
    await update.message.reply_text(text or "üë• –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")


async def create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèÉ –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return NAME


async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return NAME
    if g.query(f"PREFIX ex: <http://example.org/training#> ASK {{ ex:{name} a ex:User }}").askAnswer:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î.")
        return NAME
    context.user_data["name"] = name
    await update.message.reply_text("üìÖ –í—ñ–∫:")
    return AGE


async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if not (0 < age < 120):
            raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("üìè –ó—Ä—ñ—Å—Ç (–º):")
        return HEIGHT
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return AGE


async def receive_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text)
        if not (0.5 < height < 3):
            raise ValueError
        context.user_data["height"] = height
        await update.message.reply_text("‚öñÔ∏è –í–∞–≥–∞ (–∫–≥):")
        return WEIGHT
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return HEIGHT


async def receive_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if not (10 < weight < 300):
            raise ValueError
        name = context.user_data["name"]
        age = context.user_data["age"]
        height = context.user_data["height"]
        bmi = round(weight / (height * height), 1)
        uri = EX[name]
        g.add((uri, RDF.type, EX.User))
        g.add((uri, EX.–≤—ñ–∫, rdflib.Literal(age, datatype=XSD.integer)))
        g.add((uri, EX.–∑—Ä—ñ—Å—Ç, rdflib.Literal(height, datatype=XSD.float)))
        g.add((uri, EX.–≤–∞–≥–∞, rdflib.Literal(weight, datatype=XSD.float)))
        g.add((uri, EX.—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞, rdflib.Literal(bmi, datatype=XSD.float)))
        g.add((uri, EX.—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É, EX.Beginner))
        g.add((uri, EX.–¥–æ—Å–≤—ñ–¥, EX.Beginner))
        g.serialize("SPARQL.ttl", format="n3")
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} —Å—Ç–≤–æ—Ä–µ–Ω–æ! –Ü–ú–¢: {bmi}")
        context.user_data["new_user"] = name
        return await list_workouts(update, context, select_state=WORKOUT_SELECTION)
    except:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return WEIGHT


async def list_workouts(update, context, select_state):
    q = "PREFIX ex: <http://example.org/training#> SELECT ?w WHERE { ?w a ?t . ?t rdfs:subClassOf* ex:Workout . }"
    res = g.query(q, initNs={"ex": EX, "rdfs": RDFS})
    workouts = []
    for row in res:
        wid = row.w
        label_query = f"""
        PREFIX ex: <http://example.org/training#>
        SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
            <{wid}> ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
        }}
        """
        label_result = g.query(label_query)
        title = next(iter(label_result))[0] if label_result else wid.split('#')[-1]
        wid = wid.split('#')[-1]
        workouts.append((wid, str(title)))
    context.user_data["available_workouts"] = [w[0] for w in workouts]
    context.user_data["workout_names"] = workouts
    txt = "\n".join([f"{i + 1}. {w[1]}" for i, w in enumerate(workouts)])
    await update.message.reply_text(f"üèãÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1,3,5):\n{txt}")
    return select_state


async def receive_workout_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text.strip()
        selected_indices = [int(i.strip()) - 1 for i in user_input.split(',') if i.strip().isdigit()]
        workouts = context.user_data["available_workouts"]
        if not selected_indices or any(i < 0 or i >= len(workouts) for i in selected_indices):
            raise ValueError

        workout_names = context.user_data["workout_names"]
        user_name = context.user_data["new_user"]
        selected_workouts = [workouts[i] for i in selected_indices]

        for workout_name in selected_workouts:
            g.add((EX[user_name], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout_name]))
            label_query = f"""
            PREFIX ex: <http://example.org/training#>
            SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
                ex:{workout_name} ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
            }}
            """
            label_result = g.query(label_query)
            workout_label = next(iter(label_result))[0] if label_result else workout_name
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {workout_label} –¥–ª—è {user_name}.")

        g.serialize("SPARQL.ttl", format="n3")
        await update.message.reply_text(
            f"üí° –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π! –¢–µ–ø–µ—Ä –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è (–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /cancel, —â–æ–± –≤–∏–π—Ç–∏).")
        return AI_MODE

    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1,3,5) —É –º–µ–∂–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:")
        return WORKOUT_SELECTION


async def ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_question = update.message.text.strip()
    user_name = context.user_data.get("new_user")

    if user_question.lower() in ["/cancel", "/end"]:
        await update.message.reply_text("‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É AI. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏.")
        context.user_data.clear()
        return ConversationHandler.END

    # –õ–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI (–ø—Ä–æ—Å—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
    reply = f"ü§ñ –ü—Ä–∏–≤—ñ—Ç, {user_name}! –¢–∏ –∑–∞–ø–∏—Ç–∞–≤: {user_question}\n"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤, –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö —ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    if "—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è" in user_question.lower() or "workout" in user_question.lower():
        query = f"""
        PREFIX ex: <http://example.org/training#>
        SELECT ?–Ω–∞–∑–≤–∞ ?–≤–ø—Ä–∞–≤–∞ ?–∫–∞–ª–æ—Ä—ñ—ó
        WHERE {{
            ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
            OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ . }}
            OPTIONAL {{ ?workout ex:–≤–ø—Ä–∞–≤–∞ ?–≤–ø—Ä–∞–≤–∞ . }}
            OPTIONAL {{ ?workout ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?–∫–∞–ª–æ—Ä—ñ—ó . }}
        }}
        """
        results = g.query(query, initNs={"ex": EX})
        if results:
            reply += "–¢–≤–æ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n"
            for row in results:
                title = row.–Ω–∞–∑–≤–∞ if row.–Ω–∞–∑–≤–∞ else "–ù–µ–≤—ñ–¥–æ–º–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
                exercise = row.–≤–ø—Ä–∞–≤–∞ if row.–≤–ø—Ä–∞–≤–∞ else "‚Äî"
                calories = row.–∫–∞–ª–æ—Ä—ñ—ó if row.–∫–∞–ª–æ—Ä—ñ—ó else "?"
                reply += f"‚Ä¢ {title} ({exercise}, {calories} –∫–∫–∞–ª)\n"
        else:
            reply += "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –î–æ–¥–∞–π —ó—Ö —á–µ—Ä–µ–∑ /add_workout.\n"

    # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π —ñ–∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    else:
        reply += "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–≤–æ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! –°–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å –Ω–∞ –∫—à—Ç–∞–ª—Ç '–Ø–∫—ñ —É –º–µ–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?' –∞–±–æ –¥–æ–¥–∞–π –Ω–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ /add_workout. üòä"

    await update.message.reply_text(reply)
    return AI_MODE


async def add_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèãÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return ADD_WORKOUT_NAME


async def receive_add_workout_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ADD_WORKOUT_NAME
    if (EX[name], RDF.type, EX.User) not in g:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return ADD_WORKOUT_NAME
    context.user_data["new_user"] = name
    return await list_workouts(update, context, select_state=ADD_WORKOUT_SELECTION)


async def receive_additional_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text.strip()
        selected_indices = [int(i.strip()) - 1 for i in user_input.split(',') if i.strip().isdigit()]
        workouts = context.user_data["available_workouts"]
        if not selected_indices or any(i < 0 or i >= len(workouts) for i in selected_indices):
            raise ValueError

        workout_names = context.user_data["workout_names"]
        user = context.user_data["new_user"]
        selected_workouts = [workouts[i] for i in selected_indices]

        for workout_name in selected_workouts:
            g.add((EX[user], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout_name]))
            label_query = f"""
            PREFIX ex: <http://example.org/training#>
            SELECT ?–Ω–∞–∑–≤–∞ WHERE {{
                ex:{workout_name} ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ .
            }}
            """
            label_result = g.query(label_query)
            workout_label = next(iter(label_result))[0] if label_result else workout_name
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {workout_label} –¥–ª—è {user}.")

        g.serialize("SPARQL.ttl", format="n3")
        context.user_data.clear()
        return ConversationHandler.END

    except:
        await update.message.reply_text("‚ùå –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1,3,5):")
        return ADD_WORKOUT_SELECTION


async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return RECOMMENDATION_NAME


async def receive_recommendation_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", user_name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return RECOMMENDATION_NAME
    if (EX[user_name], RDF.type, EX.User) not in g:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return RECOMMENDATION_NAME

    query = f"""
    PREFIX ex: <http://example.org/training#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    SELECT ?workout ?–Ω–∞–∑–≤–∞ ?–≤–ø—Ä–∞–≤–∞ ?—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ ?—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?–∫–∞–ª–æ—Ä—ñ—ó
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ . }}
        OPTIONAL {{ ?workout ex:–≤–ø—Ä–∞–≤–∞ ?–≤–ø—Ä–∞–≤–∞ . }}
        OPTIONAL {{ ?workout ex:—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å . }}
        OPTIONAL {{ ?workout ex:–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ ?–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤ . }}
        OPTIONAL {{ ?workout ex:—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å . }}
        OPTIONAL {{ ?workout ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?–∫–∞–ª–æ—Ä—ñ—ó . }}
    }}
    """

    results = g.query(query, initNs={"ex": EX, "rdfs": RDFS})

    if not results:
        await update.message.reply_text(f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    reply = f"üèãÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {user_name}:\n"
    for row in results:
        title = str(row.–Ω–∞–∑–≤–∞) if row.–Ω–∞–∑–≤–∞ else row.workout.split('#')[-1]
        exercise = str(row.–≤–ø—Ä–∞–≤–∞) if row.–≤–ø—Ä–∞–≤–∞ else "‚Äî"
        calories = str(row.–∫–∞–ª–æ—Ä—ñ—ó) if row.–∫–∞–ª–æ—Ä—ñ—ó else "?"

        if row.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:
            duration_or_sets = f"{row.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å} —Ö–≤"
        elif row.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤:
            duration_or_sets = f"{row.–∫—ñ–ª—å–∫—ñ—Å—Ç—å–ü—ñ–¥—Ö–æ–¥—ñ–≤} –ø—ñ–¥—Ö–æ–¥—ñ–≤"
        else:
            duration_or_sets = "–Ω–µ–≤—ñ–¥–æ–º–æ"

        intensity_label = None
        if row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:
            labels = list(g.objects(row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, RDFS.label))
            intensity_label = next((str(l) for l in labels if getattr(l, 'language', None) == 'uk'), None)
        if not intensity_label and row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å:
            intensity_label = row.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å.split('#')[-1]
        if not intensity_label:
            intensity_label = "–ù–µ–≤—ñ–¥–æ–º–æ"

        reply += f"\nüèãÔ∏è {title} ‚Äî {exercise}, –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {intensity_label}, {duration_or_sets}, {calories} –∫–∫–∞–ª"

    await update.message.reply_text(reply)
    return ConversationHandler.END


async def myworkouts_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí™ –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return MYWORKOUTS_NAME


async def myworkouts_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", user_name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return MYWORKOUTS_NAME
    if (EX[user_name], RDF.type, EX.User) not in g:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return MYWORKOUTS_NAME

    query = f"""
    PREFIX ex: <http://example.org/training#>
    SELECT ?workout ?–Ω–∞–∑–≤–∞
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ }}
    }}
    """

    results = g.query(query, initNs={"ex": EX})

    if not results:
        await update.message.reply_text(f"üí™ –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")
        return ConversationHandler.END

    reply = f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_name}:\n"
    for row in results:
        label = row.–Ω–∞–∑–≤–∞ if row.–Ω–∞–∑–≤–∞ else row.workout.split('#')[-1]
        reply += f"‚Ä¢ {label}\n"

    await update.message.reply_text(reply)
    return ConversationHandler.END


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    return STAT_NAME


async def receive_stat_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text.strip()
    if not re.match(r"^[\w\-]+$", user_name):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return STAT_NAME
    if (EX[user_name], RDF.type, EX.User) not in g:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return STAT_NAME

    # –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏
    query_workouts = f"""
    PREFIX ex: <http://example.org/training#>
    SELECT ?–Ω–∞–∑–≤–∞ ?–∫–∞–ª–æ—Ä—ñ—ó
    WHERE {{
        ex:{user_name} ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?–Ω–∞–∑–≤–∞ . }}
        OPTIONAL {{ ?workout ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?–∫–∞–ª–æ—Ä—ñ—ó . }}
    }}
    """
    results_workouts = g.query(query_workouts, initNs={"ex": EX})

    if not results_workouts:
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    # –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    query_weight = f"""
    PREFIX ex: <http://example.org/training#>
    SELECT ?–≤–∞–≥–∞
    WHERE {{
        ex:{user_name} ex:–≤–∞–≥–∞ ?–≤–∞–≥–∞ .
    }}
    """
    result_weight = g.query(query_weight, initNs={"ex": EX})
    weight = float(next(iter(result_weight)).–≤–∞–≥–∞) if result_weight else 0.0

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
    labels = []
    calories_data = []
    for row in results_workouts:
        label = str(row.–Ω–∞–∑–≤–∞) if row.–Ω–∞–∑–≤–∞ else "–ù–µ–≤—ñ–¥–æ–º–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
        calories = float(row.–∫–∞–ª–æ—Ä—ñ—ó) if row.–∫–∞–ª–æ—Ä—ñ—ó else 0.0
        labels.append(label)
        calories_data.append(calories)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –¥–≤–æ–º–∞ –æ—Å—è–º–∏ Y
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # –ü–µ—Ä—à–∞ –≤—ñ—Å—å Y: –∫–∞–ª–æ—Ä—ñ—ó
    ax1.bar(labels, calories_data,
            color=['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#4BC0C0', '#FF6384', '#36A2EB',
                   '#FFCE56', '#9966FF'])
    ax1.set_xlabel('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    ax1.set_ylabel('–ö–∞–ª–æ—Ä—ñ—ó', color='#FF6384')
    ax1.tick_params(axis='y', labelcolor='#FF6384')
    ax1.set_xticks(range(len(labels)))
    ax1.set_xticklabels(labels, rotation=45, ha='right')

    # –î—Ä—É–≥–∞ –≤—ñ—Å—å Y: –≤–∞–≥–∞
    ax2 = ax1.twinx()
    ax2.axhline(y=weight, color='#36A2EB', linestyle='--', label=f'–í–∞–≥–∞ ({weight} –∫–≥)')
    ax2.set_ylabel('–í–∞–≥–∞ (–∫–≥)', color='#36A2EB')
    ax2.tick_params(axis='y', labelcolor='#36A2EB')
    ax2.legend(loc='upper right')

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
    logo_path = "logo.png"  # –®–ª—è—Ö –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ó—ó)
    logo_img = mpimg.imread(logo_path)
    imagebox = OffsetImage(logo_img, zoom=0.1)
    ab = AnnotationBbox(imagebox, (1, 1), xycoords='axes fraction', frameon=False, box_alignment=(1, 1))
    ax1.add_artist(ab)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    plt.title(f'üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ –≤–∞–≥–∏ –¥–ª—è {user_name}')
    plt.tight_layout()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    chart_path = 'chart.png'
    plt.savefig(chart_path)
    plt.close()

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    with open(chart_path, 'rb') as chart_file:
        await update.message.reply_photo(photo=chart_file,
                                         caption=f"üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ –≤–∞–≥–∏ –¥–ª—è {user_name}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    os.remove(chart_path)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


def main():
    app = Application.builder().token("7973391875:AAHAT7xxc3TWp2ABRI-J3b5_0DhX-FPMWJ4").build()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    commands = [
        ("start", "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        ("help", "–î–æ–ø–æ–º–æ–≥–∞ / —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        ("create_user", "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("users", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"),
        ("add_workout", "–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"),
        ("recommendations", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"),
        ("myworkouts", "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("stats", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"),
        ("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é"),
    ]
    app.bot.set_my_commands(commands)

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("create_user", create_user)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_weight)],
            WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_workout_choice)],
            AI_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ai_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add_workout", add_workout)],
        states={
            ADD_WORKOUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_add_workout_name)],
            ADD_WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_additional_workout)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    recommendation_conv = ConversationHandler(
        entry_points=[CommandHandler("recommendations", recommendations)],
        states={
            RECOMMENDATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_recommendation_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_conv = ConversationHandler(
        entry_points=[CommandHandler("stats", show_stats)],
        states={
            STAT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_stat_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è myworkouts
    myworkouts_conv = ConversationHandler(
        entry_points=[CommandHandler("myworkouts", myworkouts_start)],
        states={
            MYWORKOUTS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, myworkouts_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏
    app.add_handler(conv)
    app.add_handler(add_conv)
    app.add_handler(recommendation_conv)
    app.add_handler(stats_conv)
    app.add_handler(myworkouts_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("users", users))
    app.run_polling()


if __name__ == "__main__":
    main()