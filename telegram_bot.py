import logging
import re
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import rdflib
from uuid import uuid4

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RDF –≥—Ä–∞—Ñ–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó
g = rdflib.Graph()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—ñ–≤ —ñ–º–µ–Ω
EX = rdflib.Namespace("http://example.org/training#")
XSD = rdflib.Namespace("http://www.w3.org/2001/XMLSchema#")
RDF = rdflib.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")

try:
    g.parse("SPARQL.ttl", format="n3")

    def ensure_default_workouts():
        predefined = [
            {
                "name": "Workout_Beginner_1",
                "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è",
                "intensity": "Low",
                "duration": 15,
                "calories": 100,
            },
            {
                "name": "Workout_Cardio_2",
                "exercise": "–ë—ñ–≥ –Ω–∞ –º—ñ—Å—Ü—ñ",
                "intensity": "Medium",
                "duration": 20,
                "calories": 150,
            },
            {
                "name": "Workout_Strength_3",
                "exercise": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è",
                "intensity": "High",
                "duration": 10,
                "calories": 120,
            },
        ]

        for w in predefined:
            workout_uri = EX[w["name"]]
            if (workout_uri, RDF.type, EX.Workout) not in g:
                g.add((workout_uri, RDF.type, EX.Workout))
                g.add((workout_uri, EX.–≤–ø—Ä–∞–≤–∞, rdflib.Literal(w["exercise"])))
                g.add((workout_uri, EX.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, EX[w["intensity"]]))
                g.add((workout_uri, EX.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, rdflib.Literal(w["duration"], datatype=XSD.integer)))
                g.add((workout_uri, EX.—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó, rdflib.Literal(w["calories"], datatype=XSD.integer)))

    ensure_default_workouts()
    g.serialize(destination="SPARQL.ttl", format="n3")
except Exception as e:
    logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó: {e}")
    raise

# –°—Ç–∞–Ω–∏
NAME, AGE, HEIGHT, WEIGHT, WORKOUT_SELECTION = range(5)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ —Ñ—ñ—Ç–Ω–µ—Å-–æ–Ω—Ç–æ–ª–æ–≥—ñ—ó!\n"
        "/create_user ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "/recommendations <—ñ–º'—è> ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
    )

# /create_user
async def create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return NAME

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r'^[\w\-]+$', name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –¢—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, '_' –∞–±–æ '-'.")
        return NAME
    if g.query(f"PREFIX ex: <http://example.org/training#> ASK {{ ex:{name} a ex:User }}").askAnswer:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ —ñ–º‚Äô—è.")
        return NAME
    context.user_data["name"] = name
    await update.message.reply_text("–í—ñ–∫:")
    return AGE

async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
        if not 0 <= age <= 120:
            raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("–ó—Ä—ñ—Å—Ç (–º):")
        return HEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 120.")
        return AGE

async def receive_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text.strip())
        if not 0.5 <= height <= 2.5:
            raise ValueError
        context.user_data["height"] = height
        await update.message.reply_text("–í–∞–≥–∞ (–∫–≥):")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç —É –º–µ—Ç—Ä–∞—Ö.")
        return HEIGHT

async def receive_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.strip())
        if not 10 <= weight <= 300:
            raise ValueError

        name = context.user_data["name"]
        age = context.user_data["age"]
        height = context.user_data["height"]
        bmi = round(weight / (height * height), 1)

        uri = EX[name]
        g.add((uri, RDF.type, EX.User))
        g.add((uri, EX.–≤—ñ–∫, rdflib.Literal(age, datatype=XSD.integer)))
        g.add((uri, EX.–∑—Ä—ñ—Å—Ç, rdflib.Literal(height, datatype=XSD.float)))
        g.add((uri, EX.–≤–∞–≥–∞, rdflib.Literal(weight, datatype=XSD.float)))
        g.add((uri, EX.—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞, rdflib.Literal(bmi, datatype=XSD.float)))
        g.add((uri, EX.—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É, EX.Beginner))
        g.add((uri, EX.–¥–æ—Å–≤—ñ–¥, EX.Beginner))
        g.serialize(destination="SPARQL.ttl", format="n3")

        await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} —Å—Ç–≤–æ—Ä–µ–Ω–æ! –Ü–ú–¢: {bmi}")

        # –í–∏–±—ñ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        context.user_data["new_user"] = name
        query = "PREFIX ex: <http://example.org/training#> SELECT ?w WHERE { ?w a ex:Workout }"
        workouts = [row.w.split('#')[-1] for row in g.query(query)]
        if not workouts:
            await update.message.reply_text("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            return ConversationHandler.END

        context.user_data["available_workouts"] = workouts
        list_text = "\n".join(f"{i+1}. {w}" for i, w in enumerate(workouts))
        await update.message.reply_text(f"–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {name}:\n{list_text}")
        return WORKOUT_SELECTION

    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤–∞–≥–∞.")
        return WEIGHT

async def receive_workout_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        idx = int(update.message.text.strip()) - 1
        workouts = context.user_data["available_workouts"]
        if not (0 <= idx < len(workouts)):
            raise ValueError
        workout = workouts[idx]
        user = context.user_data["new_user"]
        g.add((EX[user], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout]))
        g.serialize(destination="SPARQL.ttl", format="n3")
        await update.message.reply_text(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {workout} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ {user}")
        context.user_data.clear()
        return ConversationHandler.END
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return WORKOUT_SELECTION

# /recommendations
async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /recommendations –Ü–º—è")
        return
    user_name = context.args[0]
    query = f"""
    PREFIX ex: <http://example.org/training#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    SELECT ?workout ?exercise ?intensity ?duration ?calories
    WHERE {{
        ?user a ex:User ;
              ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        ?workout a ?type ;
                 ex:–≤–ø—Ä–∞–≤–∞ ?exercise ;
                 ex:—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?intensity ;
                 ex:—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?duration ;
                 ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?calories .
        ?type rdfs:subClassOf* ex:Workout .
        FILTER(STR(?user) = "http://example.org/training#{user_name}")
    }}
    """
    results = g.query(query)
    workouts = defaultdict(list)
    for row in results:
        workout = row.workout.split('#')[-1]
        intensity = row.intensity.split('#')[-1]
        workouts[workout].append(
            f"‚Ä¢ {row.exercise} ‚Äî –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {intensity}, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {row.duration} —Ö–≤, –ö–∞–ª–æ—Ä—ñ—ó: {row.calories}"
        )
    if not workouts:
        await update.message.reply_text(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    reply = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {user_name}:"
    for w, details in workouts.items():
        reply += f"\n\nüèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {w}\n" + "\n".join(details)
    await update.message.reply_text(reply)

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É {context.error}")
    await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

# main
def main():
    bot_token = "7973391875:AAHAT7xxc3TWp2ABRI-J3b5_0DhX-FPMWJ4"
    app = Application.builder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create_user", create_user)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_weight)],
            WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_workout_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("recommendations", recommendations))
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == '__main__':
    main()
