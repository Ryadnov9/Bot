import logging
import re
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import rdflib

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RDF –≥—Ä–∞—Ñ–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó
g = rdflib.Graph()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—ñ–≤ —ñ–º–µ–Ω
EX = rdflib.Namespace("http://example.org/training#")
XSD = rdflib.Namespace("http://www.w3.org/2001/XMLSchema#")
RDF = rdflib.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS = rdflib.RDFS

try:
    g.parse("SPARQL.ttl", format="n3")

    def ensure_default_workouts():
        predefined = [
            {
                "uri": "Workout_Beginner_1",
                "–Ω–∞–∑–≤–∞": "–†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞",
                "exercise": "–ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è",
                "intensity": "Low",
                "duration": 15,
                "calories": 100,
            },
            {
                "uri": "Workout_Cardio_2",
                "–Ω–∞–∑–≤–∞": "–ö–∞—Ä–¥—ñ–æ –±—ñ–≥",
                "exercise": "–ë—ñ–≥ –Ω–∞ –º—ñ—Å—Ü—ñ",
                "intensity": "Medium",
                "duration": 20,
                "calories": 150,
            },
            {
                "uri": "Workout_Strength_3",
                "–Ω–∞–∑–≤–∞": "–°–∏–ª–æ–≤—ñ –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è",
                "exercise": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è",
                "intensity": "High",
                "duration": 10,
                "calories": 120,
            },
            {
                "uri": "Workout_Yoga_4",
                "–Ω–∞–∑–≤–∞": "–ô–æ–≥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤",
                "exercise": "–ü–æ–∑–∞ –¥–µ—Ä–µ–≤–∞",
                "intensity": "Low",
                "duration": 25,
                "calories": 80,
            },
            {
                "uri": "Workout_Boxing_5",
                "–Ω–∞–∑–≤–∞": "–î–æ–º–∞—à–Ω—ñ–π –±–æ–∫—Å",
                "exercise": "–£–¥–∞—Ä–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ",
                "intensity": "High",
                "duration": 30,
                "calories": 200,
            },
            {
                "uri": "Workout_Pilates_6",
                "–Ω–∞–∑–≤–∞": "–ü—ñ–ª–∞—Ç–µ—Å –Ω–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å",
                "exercise": "–†–æ–∑—Ç—è–∂–∫–∞",
                "intensity": "Medium",
                "duration": 20,
                "calories": 110,
            },
        ]

        for w in predefined:
            workout_uri = EX[w["uri"]]
            if (workout_uri, RDF.type, EX.Workout) not in g:
                g.add((workout_uri, RDF.type, EX.Workout))
                g.add((workout_uri, EX.–Ω–∞–∑–≤–∞, rdflib.Literal(w["–Ω–∞–∑–≤–∞"], lang="uk")))
                g.add((workout_uri, EX.–≤–ø—Ä–∞–≤–∞, rdflib.Literal(w["exercise"], lang="uk")))
                g.add((workout_uri, EX.—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å, EX[w["intensity"]]))
                g.add((workout_uri, EX.—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, rdflib.Literal(w["duration"], datatype=XSD.integer)))
                g.add((workout_uri, EX.—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó, rdflib.Literal(w["calories"], datatype=XSD.integer)))

    ensure_default_workouts()
    g.serialize(destination="SPARQL.ttl", format="n3")
except Exception as e:
    logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω—Ç–æ–ª–æ–≥—ñ—ó: {e}")
    raise

# –°—Ç–∞–Ω–∏
NAME, AGE, HEIGHT, WEIGHT, WORKOUT_SELECTION = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_user —â–æ–± –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /recommendations <–Ü–º‚Äô—è> ‚Äî –ø–æ–∫–∞–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó."
    )

async def create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return NAME

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not re.match(r'^[\w\-]+$', name):
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return NAME
    if g.query(f"PREFIX ex: <http://example.org/training#> ASK {{ ex:{name} a ex:User }}").askAnswer:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î.")
        return NAME
    context.user_data["name"] = name
    await update.message.reply_text("–í—ñ–∫:")
    return AGE

async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
        if not (0 <= age <= 120):
            raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("–ó—Ä—ñ—Å—Ç (–º):")
        return HEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (0‚Äì120).")
        return AGE

async def receive_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text.strip())
        if not (0.5 <= height <= 2.5):
            raise ValueError
        context.user_data["height"] = height
        await update.message.reply_text("–í–∞–≥–∞ (–∫–≥):")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑—Ä—ñ—Å—Ç —É –º–µ—Ç—Ä–∞—Ö.")
        return HEIGHT

async def receive_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.strip())
        if not (10 <= weight <= 300):
            raise ValueError

        name = context.user_data["name"]
        age = context.user_data["age"]
        height = context.user_data["height"]
        bmi = round(weight / (height * height), 1)

        uri = EX[name]
        g.add((uri, RDF.type, EX.User))
        g.add((uri, EX.–≤—ñ–∫, rdflib.Literal(age, datatype=XSD.integer)))
        g.add((uri, EX.–∑—Ä—ñ—Å—Ç, rdflib.Literal(height, datatype=XSD.float)))
        g.add((uri, EX.–≤–∞–≥–∞, rdflib.Literal(weight, datatype=XSD.float)))
        g.add((uri, EX.—ñ–Ω–¥–µ–∫—Å–ú–∞—Å–∏–¢—ñ–ª–∞, rdflib.Literal(bmi, datatype=XSD.float)))
        g.add((uri, EX.—Ä—ñ–≤–µ–Ω—å–§—ñ—Ç–Ω–µ—Å—É, EX.Beginner))
        g.add((uri, EX.–¥–æ—Å–≤—ñ–¥, EX.Beginner))
        g.serialize(destination="SPARQL.ttl", format="n3")

        await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} —Å—Ç–≤–æ—Ä–µ–Ω–æ! –Ü–ú–¢: {bmi}")

        context.user_data["new_user"] = name
        query = "PREFIX ex: <http://example.org/training#> SELECT ?workout WHERE { ?workout a ?type . ?type rdfs:subClassOf* ex:Workout . }"
        results = g.query(query, initNs={"rdfs": RDFS, "ex": EX})

        workouts = []
        for row in results:
            workout_uri = row.workout
            name_query = f"""
            PREFIX ex: <http://example.org/training#>
            SELECT ?title WHERE {{
                <{workout_uri}> ex:–Ω–∞–∑–≤–∞ ?title .
            }}
            """
            title_result = g.query(name_query)
            title = next(iter(title_result))[0] if title_result else workout_uri.split('#')[-1]
            workouts.append((workout_uri.split('#')[-1], str(title)))

        if not workouts:
            await update.message.reply_text("‚ùó –¢—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        workout_list = "\n".join(f"{i+1}. {title}" for i, (_, title) in enumerate(workouts))
        context.user_data["available_workouts"] = [uri for uri, _ in workouts]
        await update.message.reply_text(f"–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {name}:\n{workout_list}")
        return WORKOUT_SELECTION
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤–∞–≥–∞.")
        return WEIGHT

async def receive_workout_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text.strip()) - 1
        workouts = context.user_data["available_workouts"]
        if not (0 <= index < len(workouts)):
            raise ValueError
        workout_name = workouts[index]
        user_name = context.user_data["new_user"]
        g.add((EX[user_name], EX.–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é, EX[workout_name]))
        g.serialize(destination="SPARQL.ttl", format="n3")
        await update.message.reply_text(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name}.")
        context.user_data.clear()
        return ConversationHandler.END
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return WORKOUT_SELECTION

async def recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: /recommendations –Ü–º‚Äô—è")
        return
    user_name = context.args[0]
    query = f"""
    PREFIX ex: <http://example.org/training#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    SELECT ?workout ?exercise ?intensity ?duration ?calories ?title
    WHERE {{
        ?user a ex:User ;
              ex:–º–∞—î–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é ?workout .
        ?workout a ?type ;
                 ex:–≤–ø—Ä–∞–≤–∞ ?exercise ;
                 ex:—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å ?intensity ;
                 ex:—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ?duration ;
                 ex:—Å–ø–∞–ª–µ–Ω—ñ–ö–∞–ª–æ—Ä—ñ—ó ?calories .
        OPTIONAL {{ ?workout ex:–Ω–∞–∑–≤–∞ ?title . }}
        ?type rdfs:subClassOf* ex:Workout .
        FILTER(STR(?user) = "http://example.org/training#{user_name}")
    }}
    """
    results = g.query(query, initNs={"rdfs": RDFS, "ex": EX})
    workouts = defaultdict(list)
    for row in results:
        title = str(row.title) if row.title else row.workout.split('#')[-1]
        intensity = row.intensity.split('#')[-1]
        workouts[title].append(
            f"‚Ä¢ {row.exercise} ‚Äî –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: {intensity}, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {row.duration} —Ö–≤, –ö–∞–ª–æ—Ä—ñ—ó: {row.calories}"
        )

    if not workouts:
        await update.message.reply_text(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è {user_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    reply = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è {user_name}:"
    for w, details in workouts.items():
        reply += f"\n\nüèãÔ∏è {w}\n" + "\n".join(details)
    await update.message.reply_text(reply)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    bot_token = "7973391875:AAHAT7xxc3TWp2ABRI-J3b5_0DhX-FPMWJ4"
    app = Application.builder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create_user", create_user)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_weight)],
            WORKOUT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_workout_choice)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("recommendations", recommendations))
    app.run_polling()

if __name__ == "__main__":
    main()
